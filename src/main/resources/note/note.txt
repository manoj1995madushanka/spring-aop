aspect encapsulates cross-cutting concern
aop apply proxy design pattern

AOP terminology
Aspect : module of code for a cross-cutting concern (logging,security,...)
Advice : what action is taken and when it should be applied
Joint Point : when to apply code during program execution
Pointcut : Apredicate expression for where advice should be applied


Advice Types
Before advice : run before the method
After finally advice : run after the method (finally)
After returning advice : run after the method (success execution)
After throwing advice : run after method (if exeption trhown)
Around advice : run before and after method


Weaving
connecting aspects to target objects to create an advised object
different types of weaving
	compile time, load time or run time
regarding performance run time weaving is slower

AOP frameworks
	Spring AOP, AspectJ

Spring AOP
Advantages
	simpler to use than AspectJ
	Uses proxy pattern
	Can migrate to AspectJ when using @Aspect annotation

Disadvantages
	Only supports method level join points ( AspectJ supports costructor and field level)
	Can only apply aspects to beans created by spring app context
	Performance less bue to runtime weaving





























